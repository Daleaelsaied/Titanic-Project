{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "D5dlp5vcaVto",
        "outputId": "06fe5eeb-8a35-45dc-ba3a-3a20a3d1314c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f515a3e-23cc-4ee3-88ae-41a2f9c21a8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f515a3e-23cc-4ee3-88ae-41a2f9c21a8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f515a3e-23cc-4ee3-88ae-41a2f9c21a8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f515a3e-23cc-4ee3-88ae-41a2f9c21a8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7d6c71eb-58c9-458f-ad2c-3dbf066655b0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d6c71eb-58c9-458f-ad2c-3dbf066655b0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7d6c71eb-58c9-458f-ad2c-3dbf066655b0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# Import basic libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "# load dataset\n",
        "df = pd.read_csv('/content/train (2).csv')\n",
        "#first 5 rows\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Basic info about dataset\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mpuTjevkanix",
        "outputId": "4c3af73b-bf54-4215-b0b6-1bdab480effe"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#summary statistics\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "wFkYNoA2anmR",
        "outputId": "1763f842-68cc-4a37-cc2e-f387f50c7c53"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
              "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
              "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
              "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
              "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
              "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
              "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
              "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
              "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
              "\n",
              "            Parch        Fare  \n",
              "count  891.000000  891.000000  \n",
              "mean     0.381594   32.204208  \n",
              "std      0.806057   49.693429  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    7.910400  \n",
              "50%      0.000000   14.454200  \n",
              "75%      0.000000   31.000000  \n",
              "max      6.000000  512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2694a55-ced0-4ce9-a6a7-a37e69a553e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2694a55-ced0-4ce9-a6a7-a37e69a553e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2694a55-ced0-4ce9-a6a7-a37e69a553e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2694a55-ced0-4ce9-a6a7-a37e69a553e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bd5e17ee-5791-40eb-8528-f4e7b27c0b95\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd5e17ee-5791-40eb-8528-f4e7b27c0b95')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bd5e17ee-5791-40eb-8528-f4e7b27c0b95 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429856,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079693,\n        \"min\": 0.8360712409770513,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228577,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# How many passengers survived and how many didn’t"
      ],
      "metadata": {
        "id": "4Sm-JR7ya6Wd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Count number of survivors vs non-survivors\n",
        "survival_counts = df['Survived'].value_counts()\n",
        "# Bar chart\n",
        "sns.barplot(x=survival_counts.index, y=survival_counts.values)\n",
        "plt.xticks([0, 1], ['Did Not Survive', 'Survived'])\n",
        "plt.title('Passenger Survival Counts')\n",
        "plt.ylabel('Number of Passengers')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "BwbY1ubwa8Yp",
        "outputId": "8613e8fa-0f5e-408e-91e6-498e1f967d58"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# What percentage of males vs females survived"
      ],
      "metadata": {
        "id": "aaZSJt0rbCVm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Countplot with gender and survival\n",
        "sns.countplot(x='Sex', hue='Survived', data=df)\n",
        "plt.title('Survival Count by Gender')\n",
        "plt.legend(title='Survived', labels=['No', 'Yes'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "qyHJjdJobES2",
        "outputId": "cda643a3-5163-4ad2-a7f8-772f29fce6d0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Compare survival rate across passenger classes (Pclass)"
      ],
      "metadata": {
        "id": "gVC-_yTebJt7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Survival rate by passenger class\n",
        "pclass_survival_rate = df.groupby('Pclass')['Survived'].mean() * 100\n",
        "pclass_survival_rate\n",
        "\n",
        "# Barplot\n",
        "sns.barplot(x=pclass_survival_rate.index, y=pclass_survival_rate.values)\n",
        "plt.title('Survival Rate by Passenger Class')\n",
        "plt.xlabel('Passenger Class')\n",
        "plt.ylabel('Survival Rate (%)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "mGkpOBSYbLjt",
        "outputId": "4c431d0e-7d3f-446c-e935-f626c4ab0fd7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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aJUuXTrHZ3/nnXf09ttvq2vXrnruued0/vx5ffzxx2rSpIm+//57m/8o/P7772rVqpW6d++up59+2vpn/1eXL1/Whg0b1KRJEwUFBeX7z0OSdu/ere3bt6t79+4qV66cjh8/rilTpqhZs2Y6ePCg9UjQyJEjFRcXp+eee07/+Mc/lJqaqj179mjv3r1q2bKlJKlz5846cOCABg0apPLly+vcuXNav369Tp48eccn5sPODKAIW7duneHo6Gg4OjoaERERxrBhw4y1a9caGRkZNuMSEhIMScbMmTNzrEOSMWLECOvyiBEjDElGjx49coyNiIgwwsPDbdq+++47Q5IxZ84ca1uvXr2M4OBg6/LatWsNScbKlStt3tu6dWujYsWK1uVr164Z6enpNmMuXLhg+Pn5Gc8+++wt687N9c89atQo4/z580ZiYqKxbds2o379+oYkY9GiRTbjL1++nGMdUVFRNjUahmFUr17daNq0aY6x//znPw13d3fj8OHDNu2vv/664ejoaJw8efKW9QYHBxuSjMWLF1vbUlJSjLJlyxp169a1tk2bNs2QZPz888/WtoyMDKNUqVJGr169brmN3PbJ5s2bjbp169psO7d98fzzzxvFixc3rl69ahiGYXz//fe57scbTZgwwZBknD9//qZjPv/8c8PBwcHYtm2bTfvUqVMNSca3335rbZNkODs7G0ePHrW2/fDDD4Yk4+OPP7a2tWvXzihevLhx+vRpa9uRI0cMJycn48Z/2o8fP244Ojoa77zzjs229+/fbzg5Odm0N23a1JBkTJ069aaf5a81vfzyy7cde+Nnu/E7ndufwY4dO3L8fatdu7bRpk2bm673woULhiTj/fffz3MtuHdwaglFWsuWLbVjxw49/vjj+uGHH/Tee+8pKipKDzzwgFasWPG31v3CCy/kaOvWrZvi4+NtTsl88cUXcnFxueVRgObNm6tUqVL64osvrG0XLlzQ+vXr1a1bN2ubo6Oj9YhNdna2/vjjD127dk316tXT3r17C/xZRowYodKlS8vf31+NGzfWzz//rA8++EBPPPGEzTg3NzfrzykpKfrtt9/UtGlTHTt2zOZUyc0sWrRIjRs3VokSJfTbb79ZX5GRkcrKytLWrVtvu46AgAB17NjRuuzl5aWePXvq+++/V2JioiSpa9eucnV11dy5c63j1q5dq99+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/JFj/devPrs+pmvXrjp9+rRmzJiRY+yVK1d06dKlfNcfGRmpZcuW6cyZM9b2o0ePavXq1TZjO3XqJEdHR40aNSrH3yXDMPT777/na9s3GjFihAzD0DPPPKOLFy/m6I+Pj9fs2bNv+Tn+WtPHH3+c40jqX2v08PBQSEiIdf9evnxZV69etRlTqVIleXp65ri8HfceTi2hSBs0aJAuX76sjh07KiwsTBkZGdq+fbu++OILlS9f3mZS4nPPPaexY8fqueeeU7169bR161YdPnw439ssU6aMHnnkEY0fP15paWk5wsitdOvWTR9//LFGjBihmjVrqmrVqjb9bdu21ZIlS9SxY0e1adNGCQkJmjp1qqpVq5brL4K/4+WXX9bEiRM1duxYLViwQI8++qicnZ3Vrl07Pf/887p48aJmzJihMmXK6OzZszbvDQ8P15QpUzRmzBiFhISoTJkyat68uYYOHaoVK1aobdu26t27t8LDw3Xp0iXt379fX375pY4fP65SpUrdsq7KlSurb9++2r17t/z8/PTZZ58pKSkp10DVs2dPffTRR9q0aVOeTu/l1cMPP6wSJUqoV69eeumll2SxWPT555/n+KW6ceNGDRw4UF26dFHlypV17do1ff7553J0dFTnzp0l/Tl/Y+vWrWrTpo2Cg4N17tw5TZ48WeXKlVOjRo0kSc8884wWLlyoF154QZs2bVLDhg2VlZWlX375RQsXLtTatWutpwDzauTIkVq3bp0aNmyoF198UVlZWfr3v/+tGjVq2DyKoVKlShozZoxiY2N1/PhxdejQQZ6enkpISNDSpUvVv39/632OCrIfJ02apAEDBigsLMzmzr6bN2/WihUrNGbMmJu+v23btvr888/l7e2tatWqaceOHfr666+tl5hfV61aNTVr1kzh4eHy9fXVnj179OWXX2rgwIGSpMOHD6tFixbq2rWrqlWrJicnJy1dulRJSUnWWx/gHma3Y0FAHqxevdp49tlnjbCwMMPDw8NwdnY2QkJCjEGDBhlJSUk2Yy9fvmz07dvX8Pb2Njw9PY2uXbsa586dy/epJcMwjBkzZhiSDE9PT+PKlSs5+nM7tWQYhpGdnW0EBgYakowxY8bk2v/uu+8awcHBhouLi1G3bl1j1apVua7vr3Xn5nanUXr37m04OjpaL+VdsWKFUatWLcPV1dUoX768MW7c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1FtvvaX27dtLkubMmSM/Pz8tW7ZM3bt3v5ulAgCAIqjIzpFJSEhQYmKiIiMjrW3e3t566KGHtGPHjpu+Lz09XampqTYvAABwbyqyQSYxMVGS5OfnZ9Pu5+dn7ctNXFycvL29ra/AwMA7WicAALCfIhtkCio2NlYpKSnW16lTp+xdEgAAuEOKbJDx9/eXJCUlJdm0JyUlWfty4+LiIi8vL5sXAAC4NxXZIFOhQgX5+/trw4YN1rbU1FTt2rVLERERdqwMAAAUFXa9aunixYs6evSodTkhIUH79u2Tr6+vgoKCNHjwYI0ZM0ahoaGqUKGC3n77bQUEBKhDhw72KxoAABQZdg0ye/bs0SOPPGJdjomJkST16tVLs2bN0rBhw3Tp0iX1799fycnJatSokdasWSNXV1d7lQwAAIoQuwaZZs2ayTCMm/ZbLBaNHj1ao0ePvotVAQAAsyiyc2QAAABuhyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMiyADAABMyxRBZtKkSSpfvrxcXV310EMP6bvvvrN3SQAAoAgo8kHmiy++UExMjEaMGKG9e/eqdu3aioqK0rlz5+xdGgAAsLMiH2TGjx+vfv36qU+fPqpWrZqmTp2q4sWL67PPPrN3aQAAwM6KdJDJyMhQfHy8IiMjrW0ODg6KjIzUjh077FgZAAAoCpzsXcCt/Pbbb8rKypKfn59Nu5+fn3755Zdc35Oenq709HTrckpKiiQpNTW1wHVkpV8p8Htxb/o736fCwvcSN+I7iaLm734nr7/fMIxbjivSQaYg4uLiNGrUqBztgYGBdqgG9yrvj1+wdwmADb6TKGoK6zuZlpYmb2/vm/YX6SBTqlQpOTo6KikpyaY9KSlJ/v7+ub4nNjZWMTEx1uXs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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Plot the age distribution of passengers"
      ],
      "metadata": {
        "id": "leAArHLmbQqK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Age distribution of all passengers\n",
        "df['Age'].hist(bins=30)\n",
        "plt.title('Age Distribution of All Passengers')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "isHoix-ZbSwh",
        "outputId": "5d725bda-beb4-43d6-d149-3b2c15fee017"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Do passengers with family (SibSp or Parch > 0) have higher survival rates?"
      ],
      "metadata": {
        "id": "sZ2V-Qe-bYqE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new column 'HasFamily' if SibSp or Parch > 0\n",
        "df['HasFamily'] = np.where((df['SibSp'] > 0) | (df['Parch'] > 0), 1, 0)\n",
        "# Survival rate by family presence\n",
        "df.groupby('HasFamily')['Survived'].mean() * 100\n",
        "\n",
        "# Visualize survival with or without family\n",
        "sns.countplot(x='HasFamily', hue='Survived', data=df)\n",
        "plt.xticks([0, 1], ['No Family', 'Has Family'])\n",
        "plt.title('Survival by Family Presence')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Xmca9WJvbae_",
        "outputId": "a7303026-a9b2-4470-875c-3b10e8a229c2"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# What is the survival rate for passengers who paid more than the average fare"
      ],
      "metadata": {
        "id": "ZIb49IGVbgwd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Average fare\n",
        "avg_fare = df['Fare'].mean()\n",
        "# New column: HighFare (1 if fare > avg, else 0)\n",
        "df['HighFare'] = np.where(df['Fare'] > avg_fare, 1, 0)\n",
        "# Survival rate\n",
        "df.groupby('HighFare')['Survived'].mean() * 100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "E-CqUwC_bibR",
        "outputId": "01dfed6a-42dd-4c15-dfa1-2d129acc2c4b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "HighFare\n",
              "0    31.764706\n",
              "1    59.715640\n",
              "Name: Survived, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HighFare</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>31.764706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59.715640</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create a new column dividing passengers into \"Child\" (Age < 16), \"Adult\", and \"Senior\"(Age > 60)"
      ],
      "metadata": {
        "id": "nXTmTVkrbn-I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define age group function\n",
        "def age_group(age):\n",
        "    if pd.isnull(age):\n",
        "        return 'Unknown'\n",
        "    elif age < 16:\n",
        "        return 'Child'\n",
        "    elif age > 60:\n",
        "        return 'Senior'\n",
        "    else:\n",
        "        return 'Adult'\n",
        "\n",
        "#create a new column\n",
        "df['AgeGroup'] = df['Age'].apply(age_group)\n",
        "# Survival rate by age group\n",
        "df.groupby('AgeGroup')['Survived'].mean() * 100\n",
        "\n",
        "# Visualize it\n",
        "sns.countplot(x='AgeGroup', hue='Survived', data=df, order=['Child', 'Adult', 'Senior', 'Unknown'])\n",
        "plt.title('Survival by Age Group')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "uYcDC4K7bppM",
        "outputId": "5d6d18af-3ef8-4d59-d472-c0c9e3811ed9"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Check for missing values in the dataset"
      ],
      "metadata": {
        "id": "pcS7rXXqby3P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check missing values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "48YqcsoAb0qE",
        "outputId": "13af80c0-603b-4f1e-bd47-a472537b3494"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "HasFamily        0\n",
              "HighFare         0\n",
              "AgeGroup         0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cabin</th>\n",
              "      <td>687</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HasFamily</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HighFare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AgeGroup</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#fill missing Age with median\n",
        "df['Age'].fillna(df['Age'].median(), inplace=True)\n",
        "# Fill with mode (most frequent)\n",
        "df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n",
        "# Drop Cabin (too many missing)\n",
        "df.drop(columns=['Cabin'], inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uaMiBvNQb7BT",
        "outputId": "e6d8334c-f1a0-4383-fa5f-883fb52d4d2d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1870717118.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['Age'].fillna(df['Age'].median(), inplace=True)\n",
            "/tmp/ipython-input-1870717118.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create a heatmap showing correlation between numerical columns"
      ],
      "metadata": {
        "id": "Nl0BH_Fnb-Vy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Select numeric columns from the dataset\n",
        "numeric_df = df.select_dtypes(include=[np.number])\n",
        "#correlation\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')\n",
        "plt.title('Correlation Heatmap')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "9eUft0MAcAcq",
        "outputId": "7faef657-694e-4049-f51f-af572e90a301"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Plot survival counts for each Embarked location"
      ],
      "metadata": {
        "id": "aNsh968AcGZ2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Survival count by Embarked\n",
        "sns.countplot(x='Embarked', hue='Survived', data=df)\n",
        "plt.title('Survival by Embarkation Port')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "v7q5R5TPcIsQ",
        "outputId": "1941a0d0-3fe1-49ce-87f6-c39ba6eb35e4"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Section 2: Modeling & Evaluation"
      ],
      "metadata": {
        "id": "XIupaXAvcN9p"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train a Decision Tree classifier on the Titanic dataset"
      ],
      "metadata": {
        "id": "C_NIhL2zcP2N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert categorical variables to numerical using get_dummies\n",
        "df_model = pd.get_dummies(df, columns=['Sex', 'Embarked', 'AgeGroup'], drop_first=True)\n",
        "# Drop columns that are not useful for modeling\n",
        "df_model.drop(columns=['Name', 'Ticket', 'HasFamily'], inplace=True)\n",
        "df_model.drop(columns=['PassengerId'], inplace=True)\n",
        "# Separate features (X) and target (y)\n",
        "X = df_model.drop('Survived', axis=1)\n",
        "y = df_model['Survived']"
      ],
      "metadata": {
        "id": "5c_u4wiMcTaD"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "# Split the dataset into(80%/20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "dt_model = DecisionTreeClassifier(random_state=42)\n",
        "# Train the model on training data\n",
        "dt_model.fit(X_train, y_train)\n",
        "# Make predictions\n",
        "y_pred_train = dt_model.predict(X_train)\n",
        "y_pred_test = dt_model.predict(X_test)\n",
        "# Evaluate accuracy\n",
        "print(\"Decision Tree - Training Accuracy:\", accuracy_score(y_train, y_pred_train))\n",
        "print(\"Decision Tree - Testing Accuracy:\", accuracy_score(y_test, y_pred_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k_Wvhn36cZXy",
        "outputId": "912281bd-f56a-41b3-9003-f16aec4fccdb"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree - Training Accuracy: 0.9803370786516854\n",
            "Decision Tree - Testing Accuracy: 0.7877094972067039\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train a Random Forest classifier"
      ],
      "metadata": {
        "id": "K8lC9XHzcc8G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "# Initialize\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "# Train the model\n",
        "rf_model.fit(X_train, y_train)\n",
        "# Predictions\n",
        "rf_train_pred = rf_model.predict(X_train)\n",
        "rf_test_pred = rf_model.predict(X_test)\n",
        "# Accuracy\n",
        "print(\"Random Forest - Training Accuracy:\", accuracy_score(y_train, rf_train_pred))\n",
        "print(\"Random Forest - Testing Accuracy:\", accuracy_score(y_test, rf_test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GZtdPDHceyZ",
        "outputId": "e3fec282-69b4-47ee-ed1c-e8a5a106b146"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest - Training Accuracy: 0.9803370786516854\n",
            "Random Forest - Testing Accuracy: 0.8379888268156425\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train an XGBoost classifier"
      ],
      "metadata": {
        "id": "m_elmxuYckKl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "# Initialize\n",
        "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "# Train the model\n",
        "xgb_model.fit(X_train, y_train)\n",
        "# Predictions\n",
        "xgb_train_pred = xgb_model.predict(X_train)\n",
        "xgb_test_pred = xgb_model.predict(X_test)\n",
        "# Accuracy\n",
        "print(\"XGBoost - Training Accuracy:\", accuracy_score(y_train, xgb_train_pred))\n",
        "print(\"XGBoost - Testing Accuracy:\", accuracy_score(y_test, xgb_test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pl7EeiHFcmZT",
        "outputId": "3a8fb640-ca8e-40b0-8380-d62e6279371b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:12:41] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost - Training Accuracy: 0.9634831460674157\n",
            "XGBoost - Testing Accuracy: 0.8156424581005587\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Plot the ROC curve and calculate the AUC score for each model (Decision Tree, Random Forest, XGBoost)"
      ],
      "metadata": {
        "id": "BECOkAuCctE2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve, auc\n",
        "dt_probs = dt_model.predict_proba(X_test)[:, 1]\n",
        "rf_probs = rf_model.predict_proba(X_test)[:, 1]\n",
        "xgb_probs = xgb_model.predict_proba(X_test)[:, 1]\n",
        "#ROC curves\n",
        "fpr_dt, tpr_dt, _ = roc_curve(y_test, dt_probs)\n",
        "fpr_rf, tpr_rf, _ = roc_curve(y_test, rf_probs)\n",
        "fpr_xgb, tpr_xgb, _ = roc_curve(y_test, xgb_probs)\n",
        "#AUC scores\n",
        "auc_dt = auc(fpr_dt, tpr_dt)\n",
        "auc_rf = auc(fpr_rf, tpr_rf)\n",
        "auc_xgb = auc(fpr_xgb, tpr_xgb)\n",
        "#ROC curves\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.plot(fpr_dt, tpr_dt, label=f'Decision Tree (AUC = {auc_dt:.2f})')\n",
        "plt.plot(fpr_rf, tpr_rf, label=f'Random Forest (AUC = {auc_rf:.2f})')\n",
        "plt.plot(fpr_xgb, tpr_xgb, label=f'XGBoost (AUC = {auc_xgb:.2f})')\n",
        "plt.plot([0,1], [0,1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "BpMMaDlGcvGh",
        "outputId": "97dd9216-1349-405c-e46f-022a55bffa15"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Use cross_val_score with 5-fold cross-valida�on to evaluate each model"
      ],
      "metadata": {
        "id": "MHACRjxUc1jO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "# Cross-validation\n",
        "cv_dt = cross_val_score(dt_model, X, y, cv=5)\n",
        "cv_rf = cross_val_score(rf_model, X, y, cv=5)\n",
        "cv_xgb = cross_val_score(xgb_model, X, y, cv=5)\n",
        "print(\"Decision Tree CV Accuracy: \", cv_dt.mean(), \"±\", cv_dt.std())\n",
        "print(\"Random Forest CV Accuracy:\", cv_rf.mean(), \"±\", cv_rf.std())\n",
        "print(\"XGBoost CV Accuracy:      \", cv_xgb.mean(), \"±\", cv_xgb.std())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s4LnGmLac3RX",
        "outputId": "e5d6bcdb-1a6d-450e-f007-b43fd4e5b3af"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:13:47] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n",
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:13:47] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n",
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:13:47] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n",
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:13:47] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree CV Accuracy:  0.7845709622748102 ± 0.04381366437081338\n",
            "Random Forest CV Accuracy: 0.8047454648170234 ± 0.032614856476063846\n",
            "XGBoost CV Accuracy:       0.8249513527085558 ± 0.028694220007686674\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:13:47] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Plot the confusion matrix for the best-performing model."
      ],
      "metadata": {
        "id": "HYrWhQG2c8kI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "# Create confusion matrix\n",
        "cm = confusion_matrix(y_test, xgb_test_pred)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Did Not Survive\", \"Survived\"])\n",
        "disp.plot()\n",
        "plt.title('Confusion Matrix - XGBoost')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "oANmrLbec-Pr",
        "outputId": "8f0dd51d-2c44-4954-ecb7-8134e8de0896"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Perform hyperparameter tuning for the Random Forest using GridSearchCV"
      ],
      "metadata": {
        "id": "2prxerMEdEc-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "param_grid_rf = {\n",
        "    'n_estimators': [100, 150],\n",
        "    'max_depth': [None, 5],\n",
        "    'min_samples_split': [2, 5]\n",
        "}\n",
        "\n",
        "grid_rf = GridSearchCV(\n",
        "    estimator=RandomForestClassifier(random_state=42),\n",
        "    param_grid=param_grid_rf,\n",
        "    cv=3,\n",
        "    scoring='accuracy',\n",
        "    verbose=1,\n",
        "    n_jobs=-1\n",
        ")\n",
        "\n",
        "# Fit the model\n",
        "grid_rf.fit(X_train, y_train)\n",
        "\n",
        "# Print best results\n",
        "print(\"Best Random Forest Parameters:\", grid_rf.best_params_)\n",
        "print(\"Best Validation Accuracy:\", grid_rf.best_score_)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dEJRzetSdYTb",
        "outputId": "ea3bcabe-6443-47e4-9004-2a04ed5301ca"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 8 candidates, totalling 24 fits\n",
            "Best Random Forest Parameters: {'max_depth': 5, 'min_samples_split': 5, 'n_estimators': 100}\n",
            "Best Validation Accuracy: 0.8258400406576132\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Perform hyperparameter tuning for the XGBoost classifier using GridSearchCV.\n"
      ],
      "metadata": {
        "id": "t8kFSkCldrWT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from xgboost import XGBClassifier\n",
        "\n",
        "param_grid_xgb = {\n",
        "    'n_estimators': [100, 150],\n",
        "    'max_depth': [3, 5],\n",
        "    'learning_rate': [0.05, 0.1]\n",
        "}\n",
        "\n",
        "# Create GridSearchCV object\n",
        "grid_xgb = GridSearchCV(\n",
        "    estimator=XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42),\n",
        "    param_grid=param_grid_xgb,\n",
        "    cv=3,\n",
        "    scoring='accuracy',\n",
        "    verbose=1,\n",
        "    n_jobs=-1\n",
        ")\n",
        "# Fit\n",
        "grid_xgb.fit(X_train, y_train)\n",
        "# Show best parameters and best accuracy\n",
        "print(\"Best XGBoost Parameters:\", grid_xgb.best_params_)\n",
        "print(\"Best XGBoost Accuracy on Validation:\", grid_xgb.best_score_)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uqYLWIP6dtiq",
        "outputId": "cf8b3c2e-55b2-4d5d-a29a-9ead2a637450"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 8 candidates, totalling 24 fits\n",
            "Best XGBoost Parameters: {'learning_rate': 0.05, 'max_depth': 3, 'n_estimators': 100}\n",
            "Best XGBoost Accuracy on Validation: 0.8328723894621138\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/training.py:183: UserWarning: [12:18:29] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model Choice and Justification"
      ],
      "metadata": {
        "id": "97q9DXageKyS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Based on accuracy, AUC, and cross-validation:\")\n",
        "print(\"- XGBoost performed best overall.\")\n",
        "print(\"- Random Forest was also good and stable.\")\n",
        "print(\"- Decision Tree overfitted (high train, low test accuracy).\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pQZVF06ieMcS",
        "outputId": "898c44bf-e372-489d-d62c-7cf8ef045334"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Based on accuracy, AUC, and cross-validation:\n",
            "- XGBoost performed best overall.\n",
            "- Random Forest was also good and stable.\n",
            "- Decision Tree overfitted (high train, low test accuracy).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Sec�on 3: Feature Engineering & Interpreta�on"
      ],
      "metadata": {
        "id": "tMT4xxFnei4h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['Title'] = df['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())\n",
        "df['GroupSize'] = df['SibSp'] + df['Parch'] + 1\n",
        "df[['Name', 'Title', 'SibSp', 'Parch', 'GroupSize']].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "X3mi_AaOekzJ",
        "outputId": "6044c964-ac1b-49e5-d6b1-37719ce6e51d"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Name Title  SibSp  Parch  \\\n",
              "0                            Braund, Mr. Owen Harris    Mr      1      0   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...   Mrs      1      0   \n",
              "2                             Heikkinen, Miss. Laina  Miss      0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)   Mrs      1      0   \n",
              "4                           Allen, Mr. William Henry    Mr      0      0   \n",
              "\n",
              "   GroupSize  \n",
              "0          2  \n",
              "1          2  \n",
              "2          1  \n",
              "3          2  \n",
              "4          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-76c264e7-c2a4-4685-bddf-c6a0618fb590\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Title</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>GroupSize</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>Mr</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>Miss</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>Mr</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76c264e7-c2a4-4685-bddf-c6a0618fb590')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-76c264e7-c2a4-4685-bddf-c6a0618fb590 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-76c264e7-c2a4-4685-bddf-c6a0618fb590');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5d02096f-7a3c-4627-86e9-b5d725c20563\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5d02096f-7a3c-4627-86e9-b5d725c20563')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5d02096f-7a3c-4627-86e9-b5d725c20563 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[['Name', 'Title', 'SibSp', 'Parch', 'GroupSize']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\",\n          \"Allen, Mr. William Henry\",\n          \"Heikkinen, Miss. Laina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Mr\",\n          \"Mrs\",\n          \"Miss\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GroupSize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    }
  ]
}
